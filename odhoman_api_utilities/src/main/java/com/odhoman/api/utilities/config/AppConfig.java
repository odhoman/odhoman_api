/**
 * 
 */
package com.odhoman.api.utilities.config;

import com.odhoman.api.utilities.dependencyinjector.DependencyInjector;
import com.odhoman.api.utilities.dependencyinjector.DependencyInjectorException;


/**
 * Manejador de archivo de properties y algunas constantes globales
 * 
 * @author em06297
 * 
 */

public class AppConfig extends AbstractConfig {

	/**
	 * Autogenerated serializable ID
	 */
	private static final long serialVersionUID = -4698215509307721294L;

	/**
	 * Constructor protected para forzar singleton
	 * 
	 */
	protected AppConfig() {
		String configPath = System.getProperty("config.path.app",
				"EJECUTAR EL JVM CON -Dconfig.path.app" + "=path_absoluto_de_config");
		
		System.out.println("AppConfig: Leyendo configuracion en: " + configPath);

		loadConfig(configPath);
		
		setLogger(getLogger(ConfigConstants.LOG4J_CONFIG_PATH, "actual_app"));
	}

	/**
	 * Instancia singleton
	 */
	private static AppConfig appConfig = new AppConfig();

	/**
	 * Retorna una instacia de un objeto config de Aplicacion, con datos cargados desde un archivo .properties. La
	 * ubicacion del archivo la obtiene leyendo el atributo de sistema citi.common.confifg
	 * 
	 * @return Instancia configurada de propiedades del common
	 */
	public static AppConfig getInstance() {

		return appConfig;
	}
	
	/**
	 * Carga las clases indicadas en common.preload
	 * 
	 */
	protected void preloadClasses() {
		String[] classes = getString(ConfigConstants.COMMON_PRELOAD).replaceAll(" ", "").split(",");
		
		if (!"".equals(classes[0])){
		
			for (int i = 0; i < classes.length; i++) {
				try {					
					DependencyInjector.loadClass(classes[i]);
				} catch (DependencyInjectorException e) {
					if(getLogger() != null) {
						getLogger().error("No se encontr� la clase " + classes[i] + " para precargar. Revise la property " + ConfigConstants.COMMON_PRELOAD, e);
					} else {
						throw new RuntimeException("No se encontr� la clase " + classes[i] + " para precargar. Revise la property " + ConfigConstants.COMMON_PRELOAD, e);
					}
				}
			}
		}
	}
	
	
}
